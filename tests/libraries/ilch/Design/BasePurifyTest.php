<?php

/**
 * @copyright Ilch 2
 * @package ilch_phpunit
 */

namespace Ilch;

use PHPUnit\Ilch\TestCase;

define('BASE_URL', 'https://127.0.0.1');

/**
 * Tests the purify and alwaysPurify functions of the base class to validate if the
 * code generated by CKEditor "survives" passing through these functions.
 *
 * @package ilch_phpunit
 */
class BasePurifyTest extends TestCase
{
    /**
     * @var Request
     */
    protected $request;

    /**
     * @var Translator
     */
    protected $translator;

    /**
     * @var Router
     */
    protected $router;

    /**
     * @var View
     */
    protected $view;

    /**
     * Setup unit tests.
     */
    public function setUp(): void
    {
        parent::setUp();

        $this->request = new Request();
        $this->translator = new Translator();
        $this->router = new Router($this->request);
        $this->view = new View($this->request, $this->translator, $this->router);
    }

    /**
     * bold
     *
     * @return void
     */
    public function testPurifyBold()
    {
        $output = $this->view->purify('<p><strong>bold</strong></p>');
        self::assertEquals('<p><strong>bold</strong></p>', $output);
    }

    /**
     * italic
     *
     * @return void
     */
    public function testPurifyItalic()
    {
        $output = $this->view->purify('<p><em>italic</em></p>');
        self::assertEquals('<p><em>italic</em></p>', $output);
    }

    /**
     * underline
     *
     * @return void
     */
    public function testPurifyUnderline()
    {
        $output = $this->view->purify('<p><u>underline</u></p>');
        self::assertEquals('<p><u>underline</u></p>', $output);
    }

    /**
     * strikethrough
     *
     * @return void
     */
    public function testPurifyStrikethrough()
    {
        $output = $this->view->purify('<p><s>strikethrough</s></p>');
        self::assertEquals('<p><s>strikethrough</s></p>', $output);
    }

    /**
     * subscript
     *
     * @return void
     */
    public function testPurifySubscript()
    {
        $output = $this->view->purify('<p>T<sub>0</sub></p>');
        self::assertEquals('<p>T<sub>0</sub></p>', $output);
    }

    /**
     * superscript
     *
     * @return void
     */
    public function testPurifySuperscript()
    {
        $output = $this->view->purify('<p>2<sup>3</sup></p>');
        self::assertEquals('<p>2<sup>3</sup></p>', $output);
    }

    /**
     * numeric list
     *
     * @return void
     */
    public function testPurifyNumericList()
    {
        $output = $this->view->purify('<ol><li>a</li><li>b</li></ol>');
        self::assertEquals('<ol><li>a</li><li>b</li></ol>', $output);
    }

    /**
     * list
     *
     * @return void
     */
    public function testPurifyList()
    {
        $output = $this->view->purify('<ul><li>a</li><li>b</li></ul>');
        self::assertEquals('<ul><li>a</li><li>b</li></ul>', $output);
    }

    /**
     * list with indent
     *
     * @return void
     */
    public function testPurifyListIndent()
    {
        $output = $this->view->purify('<ul><li>a<ul><li>b</li></ul></li></ul>');
        self::assertEquals('<ul><li>a<ul><li>b</li></ul></li></ul>', $output);
    }

    /**
     * quote
     *
     * @return void
     */
    public function testPurifyQuote()
    {
        $output = $this->view->purify('<blockquote><p>quote</p></blockquote>');
        self::assertEquals('<blockquote><p>quote</p></blockquote>', $output);
    }

    /**
     * centered quote
     *
     * @return void
     */
    public function testPurifyQuoteCenter()
    {
        $output = $this->view->purify('<blockquote><p style="text-align: center;">quote</p></blockquote>');
        self::assertEquals('<blockquote><p style="text-align:center;">quote</p></blockquote>', $output);
    }

    /**
     * text align right
     *
     * @return void
     */
    public function testPurifyTextAlignRight()
    {
        $output = $this->view->purify('<p style="text-align: right;">right</p>');
        self::assertEquals('<p style="text-align:right;">right</p>', $output);
    }

    /**
     * text align justify
     *
     * @return void
     */
    public function testPurifyTextAlignJustify()
    {
        $output = $this->view->purify('<p style="text-align: justify;">justify</p>');
        self::assertEquals('<p style="text-align:justify;">justify</p>', $output);
    }

    /**
     * style "special container"
     *
     * @return void
     */
    public function testPurifyStyleSpecialContainer()
    {
        $output = $this->view->purify('<div style="background:#eeeeee;border:1px solid #cccccc;padding:5px 10px;">text</div>');
        self::assertEquals('<div style="background:#eeeeee;border:1px solid #cccccc;padding:5px 10px;">text</div>', $output);
    }

    /**
     * headline
     *
     * @return void
     */
    public function testPurifyHeadline()
    {
        $output = $this->view->purify('<h1>text</h1>');
        self::assertEquals('<h1>text</h1>', $output);
    }

    /**
     * font
     *
     * @return void
     */
    public function testPurifyFont()
    {
        $output = $this->view->purify('<p><span style="font-family:Comic Sans MS,cursive;">font</span></p>');
        self::assertEquals('<p><span style="font-family:\'Comic Sans MS\', cursive;">font</span></p>', $output);
    }

    /**
     * font size
     *
     * @return void
     */
    public function testPurifyFontSize()
    {
        $output = $this->view->purify('<p><span style="font-size:48px;">size</span></p>');
        self::assertEquals('<p><span style="font-size:48px;">size</span></p>', $output);
    }

    /**
     * text color
     *
     * @return void
     */
    public function testPurifyTextColor()
    {
        $output = $this->view->purify('<p><span style="color:#2ecc71;">color</span></p>');
        self::assertEquals('<p><span style="color:#2ecc71;">color</span></p>', $output);
    }

    /**
     * text backgroundcolor
     *
     * @return void
     */
    public function testPurifyBackgroundColor()
    {
        $output = $this->view->purify('<p><span style="background-color:#8e44ad;">backgroundcolor</span></p>');
        self::assertEquals('<p><span style="background-color:#8e44ad;">backgroundcolor</span></p>', $output);
    }

    /**
     * hyperlink
     *
     * @return void
     */
    public function testPurifyHyperlink()
    {
        $output = $this->view->purify('<p><a href="https://www.ilch.de">ilch</a></p>');
        self::assertEquals('<p><a href="https://www.ilch.de">ilch</a></p>', $output);
    }

    /**
     * hyperlink with href mailto
     *
     * @return void
     */
    public function testPurifyHyperLinkMailto()
    {
        $output = $this->view->purify('<p><a href="mailto:test@test.test">mailto:test@test.test</a></p>');
        self::assertEquals('<p><a href="mailto:test@test.test">mailto:test@test.test</a></p>', $output);
    }

    /**
     * anchor
     *
     * @return void
     */
    public function testPurifyAnchor()
    {
        $output = $this->view->purify('<p><a id="here" name="here">here</a></p>');
        self::assertEquals('<p><a id="here" name="here">here</a></p>', $output);
    }

    /**
     * image
     *
     * @return void
     */
    public function testPurifyImage()
    {
        $output = $this->view->purify('<p><img alt="ilch" src="https://www.ilch.de/include/images/linkus/88x31.png" style="border-width: 2px; border-style: solid; margin: 2px; float: left; width: 88px; height: 31px;" /></p>');
        self::assertEquals('<p><img alt="ilch" src="https://www.ilch.de/include/images/linkus/88x31.png" style="border-width:2px;border-style:solid;margin:2px;float:left;width:88px;height:31px;" /></p>', $output);
    }

    /**
     * code (highlighting for javascript)
     *
     * @return void
     */
    public function testPurifyCode()
    {
        $output = $this->view->purify('<pre><code class="language-javascript">&lt;script&gt;alert(\'test\');&lt;/script&gt;</code></pre><p>&nbsp;</p>');
        self::assertEquals('<pre><code class="language-javascript">&lt;script&gt;alert(\'test\');&lt;/script&gt;</code></pre><p> </p>', $output);
    }

    /**
     * table
     *
     * @return void
     */
    public function testPurifyTable()
    {
        $output = $this->view->purify('<table align="left" border="1" cellpadding="1" cellspacing="1" style="width: 500px;" summary="Content Overview"><caption>Headline</caption><thead><tr><th scope="col">letter</th><th scope="col">number</th></tr></thead><tbody><tr><td>a</td><td>1</td></tr></tbody></table>');
        self::assertEquals('<table align="left" border="1" cellpadding="1" cellspacing="1" style="width:500px;" summary="Content Overview"><caption>Headline</caption><thead><tr><th scope="col">letter</th><th scope="col">number</th></tr></thead><tbody><tr><td>a</td><td>1</td></tr></tbody></table>', $output);
    }

    /**
     * horizontal rule
     *
     * @return void
     */
    public function testPurifyHorizontalRule()
    {
        $output = $this->view->purify('<hr />');
        self::assertEquals('<hr />', $output);
    }

    /**
     * symbol
     *
     * @return void
     */
    public function testPurifySymbol()
    {
        $output = $this->view->purify('<p>&micro;C</p>');
        self::assertEquals('<p>µC</p>', $output);
    }

    /**
     * Embedded youtube video
     *
     * @return void
     */
    public function testPurifyYoutube()
    {
        $output = $this->view->purify('<div class="ckeditor-youtube"><iframe allowfullscreen="" class="embed-responsive-item" frameborder="0" height="665" src="https://www.youtube-nocookie.com/embed/M_B0mCcDQiE" width="1280"></iframe></div>');
        self::assertEquals('<div class="ckeditor-youtube"><iframe allowfullscreen="" class="embed-responsive-item" frameborder="0" height="665" src="https://www.youtube-nocookie.com/embed/M_B0mCcDQiE" width="1280"></iframe></div>', $output);
    }

    /**
     * Check if purify() removes malicious code.
     *
     * @return void
     */
    public function testPurify()
    {
        $output = $this->view->purify('<script>alert("XSS");</script>');
        self::assertEquals('', $output);
    }

    /**
     * Check if alwaysPurify() removes malicious code.
     *
     * @return void
     */
    public function testAlwaysPurify()
    {
        $output = $this->view->alwaysPurify('<script>alert("XSS");</script>');
        self::assertEquals('', $output);
    }

    /**
     * italic (CKEditor 5)
     *
     * @return void
     */
    public function testPurifyItalicCK5()
    {
        $output = $this->view->purify('<p><i>italic</i></p>');
        self::assertEquals('<p><i>italic</i></p>', $output);
    }

    /**
     * Simple code (CKEditor 5)
     *
     * @return void
     */
    public function testPurifyCodeSimpleCK5()
    {
        $output = $this->view->purify('<code>&lt;script&gt;alert(\'test\');&lt;/script&gt;</code><p>&nbsp;</p>');
        self::assertEquals('<code>&lt;script&gt;alert(\'test\');&lt;/script&gt;</code><p> </p>', $output);
    }

    /**
     * Text size as one of the predefined classes text-tiny, text-small, text-big or text-huge. (CKEditor 5)
     * Currently not used in Ilch.
     *
     * @return void
     */
    public function testPurifyTextTinyCK5()
    {
        $output = $this->view->purify('<p><span class="text-tiny">a</span></p>');
        self::assertEquals('<p><span class="text-tiny">a</span></p>', $output);
    }

    /**
     * Indent (CKEditor 5)
     *
     * @return void
     */
    public function testPurifyIndentCK5()
    {
        $output = $this->view->purify('<p style="margin-left:40px;">a</p>');
        self::assertEquals('<p style="margin-left:40px;">a</p>', $output);
    }

    /**
     * Table with various settings applied (CKEditor 5)
     *
     * @return void
     */
    public function testPurifyTableCK5()
    {
        $content = '<figure class="table" style="height:500px;width:1000px;"><table><tbody><tr><td style="border:5px dashed hsl(60,75%,60%);">a</td><td style="background-color:hsl(90,75%,60%);text-align:center;">b</td><td style="border:5px dotted hsl(0,75%,60%);text-align:right;">c</td></tr><tr><td style="padding:50px;">d</td><td><span style="background-color:hsl(150,75%,60%);">e</span></td><td><span class="text-huge">f</span></td></tr></tbody></table></figure>';
        $output = $this->view->purify($content);
        self::assertEquals($content, $output);
    }

    /**
     * Media embed (CKEditor 5)
     *
     * @return void
     */
    public function testPurifyEmbedMediaCK5()
    {
        $output = $this->view->purify('<figure class="media"><div data-oembed-url="https://www.youtube.com/watch?v=H08tGjXNHO4"><div style="position: relative; padding-bottom: 100%; height: 0; padding-bottom: 56.2493%;"><iframe src="https://www.youtube.com/embed/H08tGjXNHO4" style="position: absolute; width: 100%; height: 100%; top: 0; left: 0;" frameborder="0" allow="autoplay; encrypted-media" allowfullscreen=""></iframe></div></div></figure>');
        self::assertEquals('<figure class="media"><div data-oembed-url="https://www.youtube.com/watch?v=H08tGjXNHO4"><div style="position:relative;padding-bottom:56.2493%;height:0;"><iframe src="https://www.youtube.com/embed/H08tGjXNHO4" style="position:absolute;width:100%;height:100%;top:0;left:0;" frameborder="0" allowfullscreen=""></iframe></div></div></figure>', $output);
    }

    /**
     * Media embed, but with not allowed URL. Should get filtered out. (CKEditor 5)
     *
     * @return void
     */
    public function testPurifyEmbedMediaNotAllowedURLCK5()
    {
        $output = $this->view->purify('<figure class="media"><div data-oembed-url="https://www.bad.url/watch?v=H08tGjXNHO4"><div style="position: relative; padding-bottom: 100%; height: 0; padding-bottom: 56.2493%;"><iframe src="https://www.bad.url/embed/H08tGjXNHO4" style="position: absolute; width: 100%; height: 100%; top: 0; left: 0;" frameborder="0" allow="autoplay; encrypted-media" allowfullscreen=""></iframe></div></div></figure>');
        self::assertEquals('<figure class="media"><div><div style="position:relative;padding-bottom:56.2493%;height:0;"><iframe style="position:absolute;width:100%;height:100%;top:0;left:0;" frameborder="0" allowfullscreen=""></iframe></div></div></figure>', $output);
    }

    /**
     * Making use of the media embed plugin in the ilchmedia plugin to embed locally hosted videos. (CKEditor 5)
     *
     * @return void
     */
    public function testPurifyLocalVideoCK5()
    {
        $output = $this->view->purify('<figure class="media"><div data-oembed-url="http://localhost/ilch-bs5-ck5/application/modules/media/static/upload/65e2c095300cdDSCN0918.mov"><div style="position:relative; padding-bottom:100%; height:0"><video style="position:absolute; width:100%; height:100%; top:0; left:0" controls="" src="http://localhost/ilch-bs5-ck5/application/modules/media/static/upload/65e2c095300cdDSCN0918.mov"></video></div></div></figure>');
        self::assertEquals('<figure class="media"><div data-oembed-url="http://localhost/ilch-bs5-ck5/application/modules/media/static/upload/65e2c095300cdDSCN0918.mov"><div style="position:relative;padding-bottom:100%;height:0;"><video style="position:absolute;width:100%;height:100%;top:0;left:0;" controls="" src="http://localhost/ilch-bs5-ck5/application/modules/media/static/upload/65e2c095300cdDSCN0918.mov"></video></div></div></figure>', $output);
    }

    /**
     * Making use of the media embed plugin in the ilchmedia plugin to embed videos. In this with an not allowed URL. Should be filtered out. (CKEditor 5)
     *
     * @return void
     */
    public function testPurifyLocalVideoNotAllowedURLCK5()
    {
        $output = $this->view->purify('<figure class="media"><div data-oembed-url="http://bad.url/ilch-bs5-ck5/application/modules/media/static/upload/65e2c095300cdDSCN0918.mov"><div style="position:relative; padding-bottom:100%; height:0"><video style="position:absolute; width:100%; height:100%; top:0; left:0" controls="" src="http://bad.url/65e2c095300cdDSCN0918.mov"></video></div></div></figure>');
        self::assertEquals('<figure class="media"><div><div style="position:relative;padding-bottom:100%;height:0;"><video style="position:absolute;width:100%;height:100%;top:0;left:0;" controls=""></video></div></div></figure>', $output);
    }
}
